# This is a basic workflow to help you get started with Actions

name: Release

# Controls when the action will run.
on:
  release:
    types: [published]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PACKAGE_NAME_ANDROID: org.phidatalab.radar_armt
  KEYSTORE_PATH: radar-armt-release-key.keystore
  KEYSTORE_ALIAS: alias_name
  PLAYSTORE_SERVICE_KEY: service-api.json
  PLAYSTORE_TRACK: alpha

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Build and test the code
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Cache
        uses: actions/cache@v2.0.0
        with:
          # Cache gradle directories
          path: |
            ~/.gradle/caches
            ~/.gradle/native
            ~/.gradle/wrapper
          # Key for restoring and saving the cache
          key: ${{ runner.os }}-gradle

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Fix Android directories
        run: rm -R /usr/local/lib/android/sdk/build-tools/31.0.0/ && rm -R /usr/local/lib/android/sdk/build-tools/32.0.0/

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Set up Ruby 2.6
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6 # Not needed with a .ruby-version file
          bundler-cache: true

      - name: Copy aRMT secrets
        run: 'echo "$SECRET" > src/assets/data/secret.ts'
        shell: bash
        env:
          SECRET: ${{secrets.SECRET_TS}}

      - name: Copy Google-Services.json
        run: 'echo "$SECRET" > google-services.json'
        shell: bash
        env:
          SECRET: ${{secrets.GOOGLE_SERVICES_ANDROID}}

      - name: Copy Playstore Account Service-api.json
        run: 'echo "$SECRET" > service-api.json'
        shell: bash
        env:
          SECRET: ${{secrets.SERVICE_API}}

      - name: Copy Release Keystore
        run: |
          echo "$SECRET" > radar-armt-release-key.keystore.asc
          gpg -d --passphrase "${{ secrets.RELEASE_KEYSTORE_PASSPHRASE }}" --batch radar-armt-release-key.keystore.asc > radar-armt-release-key.keystore
        shell: bash
        env:
          SECRET: ${{secrets.RELEASE_KEYSTORE}}

      - name: Install Ionic and Cordova
        run: npm i -g ionic cordova

      - name: Install cordova-res
        run: npm i -g cordova-res

      - name: Install app dependencies
        run: npm install

      - name: Run unit tests
        run: npm run test

      - name: Add Android platform
        run: ionic cordova platform add android

      - name: Prepare Android app
        run: npm install

      - name: Build and Deploy Android app to Play Store
        uses: maierj/fastlane-action@v2.0.1
        with:
          lane: 'android deploy'
          options: '{ "keystore_path": "${KEYSTORE_PATH}", "keystore_password": "${KEYSTORE_PASS}", "keystore_alias": "${KEYSTORE_ALIAS}", "package_name": "${PACKAGE_NAME_ANDROID}", "track": "${PLAYSTORE_TRACK}", "json_key": "${PLAYSTORE_SERVICE_KEY}" }'
        env:
          KEYSTORE_PATH: ${{env.KEYSTORE_PATH}}
          KEYSTORE_PASS: ${{secrets.KEYSTORE_PASS}}
          KEYSTORE_ALIAS: ${{env.KEYSTORE_ALIAS}}
          PACKAGE_NAME_ANDROID: ${{env.PACKAGE_NAME_ANDROID}}
          PLAYSTORE_TRACK: ${{env.PLAYSTORE_TRACK}}
          PLAYSTORE_SERVICE_KEY: ${{env.PLAYSTORE_SERVICE_KEY}}
